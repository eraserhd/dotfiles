# General Settings
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

set-option global autoreload yes
set-option global grepcmd 'ag --column'

hook global BufWritePre .* %{ nop %sh{ mkdir -p $(dirname "$kak_hook_param") }}
hook global WinCreate ^[^*]+$ editorconfig-load

#FIXME: alias global gn grep-next-match
#FIXME: alias global gp grep-previous-match

# Mappings
# ‾‾‾‾‾‾‾‾

map global normal <a-v> ': execute-keys %val{count}v<ret>'
map global normal v     ': nop<ret>'

map global normal w     ': execute-keys %val{count}<lt>a-w<gt><ret>'
map global normal W     ': execute-keys %val{count}<lt>a-W<gt><ret>'
map global normal <a-w> ': execute-keys %val{count}w<ret>'
map global normal <a-W> ': execute-keys %val{count}W<ret>'
map global normal b     ': execute-keys %val{count}<lt>a-b<gt><ret>'
map global normal B     ': execute-keys %val{count}<lt>a-B<gt><ret>'
map global normal <a-b> ': execute-keys %val{count}b<ret>'
map global normal <a-B> ': execute-keys %val{count}B<ret>'
map global normal e     ': execute-keys %val{count}<lt>a-e<gt><ret>'
map global normal E     ': execute-keys %val{count}<lt>a-E<gt><ret>'
map global normal <a-e> ': execute-keys %val{count}e<ret>'
map global normal <a-E> ': execute-keys %val{count}E<ret>'

# Prompt navigation in scrollback
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

map global normal <c-p> 'gh<a-/>^ᐅ [^\n]<ret>;'
map global normal <c-n> '/^ᐅ \K[^\n]<ret>'

# Appearance
# ‾‾‾‾‾‾‾‾‾‾

colorscheme palenight

set-face global Default       rgb:bfc7d5,default
set-face global Whitespace    rgb:4b5263,default+fg
set-face global StatusLine    rgb:bfc7d5,default
set-face global BufferPadding rgb:4b5263,default
set-face global Prompt        rgb:c792ea,default

set-face global PrimarySelection default,rgb:8700af+g
set-face global SecondarySelection default,rgb:5f0087+g

set-option global ui_options terminal_assistant=none terminal_status_on_top=true terminal_set_title=false

set-face global LineNumbersWrapped black
add-highlighter global/matching show-matching

hook global WinCreate '\*stdin(?:-\d+)?\*' %{
    set-option window filetype scrollback
}
hook global WinSetOption filetype=(?!scrollback).* %{
    try %{ add-highlighter window/number number-lines }
    try %{ add-highlighter window/whitespace show-whitespaces -spc ' ' -tab '➤' -lf '↩' }
}
hook global WinSetOption filetype=scrollback %{
    try %{ remove-highlighter window/number }
    try %{ remove-highlighter window/whitespace }
}

define-command highlight-trailing-whitespace %{
    evaluate-commands %sh{
        if [ -z "$kak_client" ]; then
            exit
        fi
        printf %s\\n 'try %{ remove-highlighter window/trailing-whitespace }'
        case "$kak_opt_filetype" in
        diff) printf %s\\n 'add-highlighter window/trailing-whitespace regex '"'"'^[^\n]+?\K\h+$'"'"' 0:default,rgb:ff5370+g' ;;
        *)    printf %s\\n 'add-highlighter window/trailing-whitespace regex '"'"'\h+$'"'"' 0:default,rgb:ff5370+g' ;;
        esac
    }
}

hook global WinSetOption filetype=(!scrollback).* %{
    hook -once window NormalIdle .* highlight-trailing-whitespace
}

# Scratch buffers
hook global BufCreate '\*scratch(-\d+)?\*' %{ execute-keys '%<a-d>' }


# Highlight Current Word
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

# Stolen from mawww (and heavily modified!)
declare-option -hidden regex curword
declare-option -hidden str curword_type 'normal'
declare-option -hidden regex curword_word_class
set-face global Reference default,rgb:4a4a4a
add-highlighter global/ dynregex '%opt{curword}' 0:Reference

define-command -override -hidden highlight-curword-normal %{
    evaluate-commands -draft %{
        try %{
            execute-keys <space><a-i>w
            set-option buffer curword "(?<!%opt{curword_word_class})\Q%val{selection}\E(?!%opt{curword_word_class})"
        } catch %{
            set-option buffer curword ''
        }
    }
}
define-command -override -hidden highlight-curword-lsp %{
    set-option buffer curword ''
    lsp-highlight-references
}
define-command -override -hidden highlight-curword %{
    "highlight-curword-%opt{curword_type}"
}
define-command -override -hidden make-curword-word-class %{
    evaluate-commands %sh{
        eval set -- "$kak_quoted_opt_extra_word_chars"
        word_class='['
        while [ $# -ne 0 ]; do
            case "$1" in
                -) word_class="$word_class-";;
            esac
            shift
        done
        word_class="$word_class"'\w'
        eval set -- "$kak_quoted_opt_extra_word_chars"
        while [ $# -ne 0 ]; do
            case "$1" in
                "-") ;;
                "]") word_class="$word_class"'\]';;
                "'") word_class="$word_class''";;
                *)   word_class="$word_class$1";;
            esac
            shift
        done
        word_class="$word_class]"
        printf "set-option window curword_word_class '%s'\\n" "$word_class"
    }
}
hook -group highlight-curword global NormalIdle .* highlight-curword
hook -group highlight-curword global WinSetOption extra_word_chars=.* make-curword-word-class

# Wrapping
# ‾‾‾‾‾‾‾‾

define-command -override wrap %{
    add-highlighter window/wrap wrap -word
}

# Makefile
# ‾‾‾‾‾‾‾‾

hook global WinSetOption filetype=makefile %{
    set-option window expandtabs no
    hook -once -always WinSetOption filetype=(?!makefile).* %{
        unset-option window expandtabs
    }
}

# Go
# ‾‾

hook -group golang global WinSetOption filetype=go %{
    set-option window tabstop 8
    set-option window indentwidth 8
    set-option window expandtabs no
    set-option window curword_type lsp
    hook -once -always window WinSetOption filetype=(?!go).* %{
        set-option window curword_type normal
        unset-option window expandtabs
        remove-hooks window golang
    }
}

# Soft tabs
# ‾‾‾‾‾‾‾‾‾

declare-option -docstring 'Whether to expand tabs to spaces' bool expandtabs yes

define-command -params 0 expand-tabs %{
    hook -group expand-tabs window InsertChar \t %{ try %{
        execute-keys -draft "h%opt{indentwidth}@"
    } }
    hook -group expand-tabs window InsertDelete ' ' %{ try %{
        execute-keys -draft "h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>"
    } }
}

define-command -params 0 keep-tabs %{
    remove-hooks window expand-tabs
}

hook global WinSetOption expandtabs=yes expand-tabs
hook global WinSetOption expandtabs=no keep-tabs


# Jump
# ‾‾‾‾

declare-option -hidden str jump_search_result

define-command -hidden -params 1 jump-helper %{
    evaluate-commands %sh{
        if [ "$1" -ef "${kak_buffile}" ]; then
            printf 'set-option global jump_search_result "%s"\n' "${kak_client}"
        fi
    }
}

define-command -override \
    -docstring %{jump [<options>] <file> [<line> [<column>]]

Takes all the same switches as edit.} \
    -params 1..3 \
    -file-completion \
    jump %{
    set-option global jump_search_result %opt{jumpclient}
    evaluate-commands %sh{
        for client in ${kak_client_list}; do
            echo "evaluate-commands -client \"${client}\" %{jump-helper \"$1\"}"
        done
    }
    evaluate-commands -try-client %opt{jump_search_result} %{
        edit %arg{@}
        try %{ focus }
    }
}

# Normal Mode
# ‾‾‾‾‾‾‾‾‾‾‾

map global normal * '<a-i>w"/yn'
map global normal <a-*> '<a-i>w"/y<a-n>'

map global user c ': enter-user-mode case<ret>'

# Filetypes
# ‾‾‾‾‾‾‾‾‾

hook global WinSetOption filetype=nix %{
    set-option window indentwidth 2
}

hook global WinSetOption filetype=ruby %{
    set-option window indentwidth 2
}

# Autowrap
# ‾‾‾‾‾‾‾‾

set-option global autowrap_column 78
set-option global autowrap_fmtcmd 'fmt -w %c'
set-option global autowrap_format_paragraph yes

# GitHub
# ‾‾‾‾‾‾

declare-option -hidden str gist_selection

define-command -override \
    -docstring %{} \
    gist %{
    evaluate-commands -draft %sh{
        if [ $kak_selection_length -eq 1 ]; then
          printf "execute-keys '%%'\\n"
        fi
        printf 'set-option buffer gist_selection "%%val{selection}"\n'
    }
    evaluate-commands %sh{
        filename=$(basename "$kak_bufname")
        url=$(printf %s "$kak_opt_gist_selection" |gh gist create --filename "$filename" -)
        printf "set-register dquote '"
        printf %s "$url" |sed -e "s/'/''/g"
        printf "'\n"
    }
}

# Clojure
# ‾‾‾‾‾‾‾

hook -once global ModuleLoaded clojure %{
    set-option global clojure_source_directories '(?:[^/.][^/]*)(?:/src|/test|/dev)'
}

hook global WinSetOption filetype=(clojure|scheme|racket|lisp) %{
    parinfer-enable-window -smart
}

declare-option -hidden str clojure_buffer_contents
declare-option -hidden str-list clojure_selections

define-command -override -params 1 -docstring %{Clojure element} \
    clojure-select-object %{
    evaluate-commands -draft %{
        execute-keys '%'
        set-option buffer clojure_buffer_contents %val{selection}
    }
    set-option buffer clojure_selections
    evaluate-commands %sh{
        kind="$1"
        count="${kak_count-1}"
        result_selections=''
        for desc in $kak_selections_char_desc; do
            anchor_line="${desc%%.*}"
            desc="${desc#*.}"
            anchor_column="${desc%%,*}"
            desc="${desc#*,}"
            cursor_line="${desc%%.*}"
            cursor_column="${desc#*.}"
            extent=whole
            case "|${kak_object_flags}|" in
                *"|inner|"*) extent=inside;;
            esac
            direction=''
            case "${kak_object_flags}" in
                *to_begin*to_end*|*to_end*to_begin*) direction='';;
                *to_begin*) direction=to_begin;;
                *to_end*) direction=to_end;;
            esac
            if [ $cursor_line -lt $anchor_line ]; then
                dir=forward
            elif [ $cursor_line -eq $anchor_line ] && [ $cursor_column -lt $anchor_column ]; then
                dir=forward
            fi
            if [ "$dir" = forward ]; then
                cursor_column=$(( cursor_column - 1 ))
            else
                anchor_column=$(( anchor_column - 1 ))
            fi
            eval "$(rep --port="@.nrepl-port@${kak_buffile-.}" \
                --op=select \
                --send kind,string,$kind \
                --send count,integer,$count \
                --send combine,string,$kak_select_mode \
                --send direction,string,$direction \
                --send extent,string,$extent \
                --send cursor-line,integer,$cursor_line \
                --send cursor-column,integer,$cursor_column \
                --send anchor-line,integer,$anchor_line \
                --send anchor-column,integer,$anchor_column \
                --print cursor-line,1,ok=yes%ncursor_line=%{cursor-line}%ncursor_column=%{cursor-column}%nanchor_line=%{anchor-line}%nanchor_column=%{anchor-column}%n \
                --print out,2,%{out} \
                --print err,2,%{err} \
                --print value,2,%{value}%n \
                "$kak_opt_clojure_buffer_contents" )"
            if [ "$ok" = "yes" ]; then
                dir=''
                if [ $cursor_line -lt $anchor_line ]; then
                    dir=forward
                elif [ $cursor_line -eq $anchor_line ] && [ $cursor_column -lt $anchor_column ]; then
                    dir=forward
                fi
                if [ "$dir" = forward ]; then
                    cursor_column=$(( cursor_column + 1 ))
                else
                    anchor_column=$(( anchor_column + 1 ))
                fi
                result_selections="${result_selections} ${anchor_line}.${anchor_column},${cursor_line}.${cursor_column}"
            fi
        done
        printf 'select -codepoint %s\n' "$result_selections"
    }
}

define-command -override centralpark-enable %{
    hook -group centralpark window WinSetOption curword=.* %{
        evaluate-commands %sh{
            cd "$(dirname "$kak_buffile")"
            curword=$(printf %s "$kak_opt_curword" |sed -e 's/^.*\\Q//' -e 's/\\E.*$//')
            info="$(rep "(dev/describe-curword \"$curword\")" 2>/dev/null |sed -e '/^nil$/d')"
            if [ -n "$info" ]; then
                printf "info '"
                printf %s "$info" |sed -e "s/'/''/g"
                printf "'\n"
            fi
        }
    }
}

define-command -override centralpark-disable %{
    remove-hooks window centralpark
}

hook -group centralpark global WinSetOption filetype=clojure %{
    evaluate-commands %sh{
        printf 'triggered %s\n' "$kak_buffile" >&2
        case "$kak_buffile" in
            */src/centralpark/*) printf 'centralpark-enable\n';;
        esac
    }
}

define-command -override -params 0 -docstring %{Run all Clojure tests} \
    clojure-test-all %{
    evaluate-commands -draft %{
        repl-send-text "(refresh) (run-tests)
"
    }
}

define-command -override -params 0 -docstring %{Run tests in current Clojure namespace} \
    clojure-test-ns %{
    evaluate-commands -draft %{
        rep-find-namespace
        repl-send-text "(refresh) (run-tests '%opt{rep_namespace})
"
    }
}

define-command -override -params 0 -docstring %{Run selected Clojure test} \
    clojure-test-this %{
    evaluate-commands -draft %{
        clojure-select-object toplevel
        execute-keys '<a-:><a-;>e'
        execute-keys '<a-k>deftest<ret>' # Ensure this is a test
        execute-keys '\e\b"ty'
        rep-find-namespace
        repl-send-text "(refresh) (run-tests '%opt{rep_namespace}/%reg{t})
"
    }
}

declare-user-mode clojure-test
map -docstring 'Run all tests'         global clojure-test a ': clojure-test-all<ret>'
map -docstring 'Test this namespace'   global clojure-test n ': clojure-test-ns<ret>'
map -docstring 'Run test under cursor' global clojure-test t ': clojure-test-this<ret>'

hook -group clojure-objects global WinSetOption filetype=clojure %{
    set-option window indentwidth 2
    map -docstring 'Clojure element'        window object e '<a-;> clojure-select-object element<ret>'
    map -docstring 'Clojure form'           window object f '<a-;> clojure-select-object form<ret>'
    map -docstring 'top-level Clojure form' window object t '<a-;> clojure-select-object toplevel<ret>'

    #map window normal b '[<a-;> clojure-select-object element<ret>'
    #map window normal B '{<a-;> clojure-select-object element<ret>'
    #map window normal e ']<a-;> clojure-select-object element<ret>'
    #map window normal E '}<a-;> clojure-select-object element<ret>'
    #map window normal w '<a-a><a-;> clojure-select-object element<ret>'

    map -docstring 'Run tests' window user t ': enter-user-mode clojure-test<ret>'
}

declare-user-mode babashka
map -docstring 'Replace with result' global user b ': babashka-replace<ret>'

define-command -override -params 0 -docstring %{Replace selection with babashka result} \
    babashka-replace %{
    execute-keys '| bb --prn /dev/stdin<ret>'
}

# LSP
# ‾‾‾

evaluate-commands %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=go lsp-enable-window
map global user l ': enter-user-mode lsp<ret>'

# Allow goto to be plumbed with the right dir
hook global WinSetOption lsp_project_root=.+ %{
    set-option window plumb_wdir "%opt{lsp_project_root}"
}

# Misc
# ‾‾‾‾

define-command rm -params 0 %{
    nop %sh{ rm -f "$kak_buffile" }
    delete-buffer!
}

define-command \
    -override \
    -docstring %{mv <target>: move this file to <target> dir or file} \
    -shell-script-candidates 'echo "$kak_bufname"' \
    -params 1 \
    mv %{
    evaluate-commands %sh{
        target="$1"
        if $kak_modified; then
            printf 'fail "mv: buffer is modified."\n'
            exit
        fi
        if [ -d "$target" ]; then
            target="${target}/$(basename "$kak_buffile")"
        fi
        mkdir -p "$(dirname "$target")"
        mv "$kak_buffile" "$target"
        if [ $? -ne 0 ]; then
            printf 'fail "mv: unable to move file."\n'
            exit
        fi
        printf 'delete-buffer\n'
        printf 'edit %%{%s}\n' "$target"
    }
}

# Diff
# ‾‾‾‾

hook -group diff-text-objects global WinSetOption filetype=diff %{
    map window -docstring 'diff file' object f '<a-;> diff-select-file<ret>'
    map window -docstring 'diff hunk' object h '<a-;> diff-select-hunk<ret>'
    hook -once -always window WinSetOption filetype=.* %{
        unmap window object f
        unmap window object h
    }
}

hook -once global ModuleLoaded diff %{
    add-highlighter shared/diff/comment regex '^#[^\n]*' 0:comment
    add-highlighter shared/diff/feedback regex '^>[^\n]*' 0:title
    # Use kak-plumb <ret>, not diff.kak
    # FIXME: There should be a better way to resolve this.
    define-command -override diff-jump -params .. plumb-click-diff
}

# Jumpclient
# ‾‾‾‾‾‾‾‾‾‾

set-option global jumpclient %val{client}
hook -group manage-jumpclient global ClientClose .* %{
    evaluate-commands %sh{
        if [ "$kak_opt_jumpclient" = "$kak_hook_param" ]; then
            for client in $kak_client_list; do
                if [ "$client" != "$kak_hook_param" ]; then
                    printf 'set-option global jumpclient "%s"\n' "$client"
                    exit 0
                fi
            done
        fi
    }
}

map global user j ': set-option global jumpclient %val{client}<ret>'

# Nexus
# ‾‾‾‾‾
define-command \
	-override \
	-params 1 \
	-shell-script-candidates '( cd nexus/services/core/sql && ls -1 *.sql )' \
	N-sql %{
	edit "nexus/services/core/sql/%arg{1}"
}

# Kubernetes
# ‾‾‾‾‾‾‾‾‾‾

hook global BufCreate .*/\.kube/config %{
    set-option buffer filetype yaml
}

# OpenSCAD
# ‾‾‾‾‾‾‾‾

hook global BufCreate .*\.scad\.m4 %{
    set-option buffer filetype openscad
}
