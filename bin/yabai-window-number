#!/usr/bin/env gxi

(import :std/misc/process
        :std/sort
        :std/text/json)

(def (focused-window windows)
  (def (focused? window)
    (equal? 1 (hash-ref window 'focused #f)))
  (find focused? windows))

(def (window-appears-earlier? a b)
  (let ((ax (hash-ref (hash-ref a 'frame) 'x))
        (ay (hash-ref (hash-ref a 'frame) 'y))
        (bx (hash-ref (hash-ref b 'frame) 'x))
        (by (hash-ref (hash-ref b 'frame) 'y)))
    (cond
     ((< ax bx) #t)
     ((> ax bx) #f)
     (else      (< ay by)))))

(def (nth-window coll index)
  (if (< -1 index (length coll))
    (list-ref coll index)
    (last coll)))

(def (in-same-space? a b)
  (equal? (hash-ref a 'space)
          (hash-ref b 'space)))

(def (main n-string)
  (let* ((n               (string->number n-string))
         (windows         (run-process ["yabai" "-m" "query" "--windows"]
                                       coprocess: read-json))
         (focused-window  (focused-window windows))
         (space-windows   (filter (lambda (window)
                                    (in-same-space? window focused-window))
                                  windows))
         (ordered-windows (sort space-windows window-appears-earlier?))
         (window-n        (nth-window ordered-windows n)))
    (displayln (hash-ref window-n 'id))))
