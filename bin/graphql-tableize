#!/usr/bin/env gxi
(import :std/text/json)

(def (paths objects)
  (def path-list '())

  (def (add-field path)
    (if (not (member path path-list))
      (set! path-list (append path-list (list path)))))

  (def (find-fields prefix object)
    (hash-for-each
      (lambda (k v)
        (cond
         ((void? v) #f)
         ((hash? v) (find-fields (append prefix (list k)) v))
         (else      (add-field (append prefix (list k))))))
      object))
  
  (for-each (cut find-fields '() <>) objects)

  path-list)

(def (value-path->string path)
  (string-join (map symbol->string path) "."))

(def (format-value x)
  (if (string? x)
    x
    (json-object->string x)))

(def (main)
  (def objects (read-json))
  (def value-paths (paths objects))
  (def (safe-hash-ref k x)
    (if (hash-table? x)
      (hash-ref x k (void))
      (void)))
  (def (get-in ks object)
    (foldl safe-hash-ref object ks))
  (def (field-values object)
    (map (cut get-in <> object) value-paths))

  (displayln (string-join (map value-path->string value-paths) "\t"))

  (for-each (lambda (object)
              (displayln (string-join (map format-value (field-values object)) "\t")))
            objects))
