#!/usr/bin/env bash

set -eo pipefail

showOutputOnFail() {
    local errorCode tmp=$(mktemp)
    "$@" >"$tmp" 2>&1
    errorCode=$?
    if (( errorCode > 0 )); then
        echo 'Command failed: ' "$@" >&2
        cat "$tmp"
        rm -f "$tmp"
        return $errorCode
    fi
    rm -f "$tmp"
}

cloneTempNexus() {
    printf 'Cloning nexus...\n'
    rm -rf /tmp/nexus
    cd /tmp
    showOutputOnFail git clone git@github.com:2uinc/nexus.git
    cd nexus
}

applyPatches() {
    local patch
    for patch in "$@"; do
        showOutputOnFail git cherry-pick "origin/staging^{/$patch}"
    done
}

findManagedBranches() {
    git log --reverse --format='%s' origin/master..origin/staging |sed -e 's/ .*$//'
    git for-each-ref --format='%(refname:strip=3)' 'refs/remotes/origin/staging-*'
    printf 'staging\n'
    printf 'tools\n'
}

makeSteps() {
    (
        local patch
        for patch in "$@"; do
            printf 'applyPatch "%s"\n' "$patch"
        done
        local branch
        for branch in $(cat .git/managed-branches); do
            printf 'rebaseBranch "%s"\n' "$branch"
        done
    ) >.git/nexus-steps
}

do_applyPatch() {
    local name="$1"
    git cherry-pick "origin/$name"
}

do_rebaseBranch() {
    local branch="$1"
    git checkout "$branch"
    git reset --hard "origin/$branch"
    local base='master'


    git rebase "$base"
}

cmd_continue() {
    # FIXME: Refactor so queue is on disk!

    local root="$(git rev-parse origin/master)"
    local queue=( "$root" )
    local queueStart=0 queueEnd=1
    local commit='' nextCommit=''
    touch .git/nexus-rebase/done/"$root" # root is done by the reset below
    while (( queueStart < queueEnd )); do
        commit="${queue[$queueStart]}"
        queueStart=$(( queueStart + 1 ))
        for nextCommit in $(ls -1 .git/nexus-rebase/reverse-deps/"$commit" 2>/dev/null); do
            queue[$queueEnd]="$nextCommit"
            queueEnd=$(( queueEnd + 1 ))
        done
        if [ -e .git/nexus-rebase/done/"$commit" ]; then
            continue
        fi
        printf '>> %s\n' "$commit"

        local branches=( $(ls -1 .git/nexus-rebase/branches/"$commit" 2>/dev/null) )
        local branch="${branches[0]}"

        git checkout "$branch"
        if ! git cherry-pick "$commit" >.git/nexus-rebase/cherry.txt 2>&1; then
            if grep -q '^The previous cherry-pick is now empty,' .git/nexus-rebase/cherry.txt; then
                git cherry-pick --skip
            else
                cat .git/nexus-rebase/cherry.txt >&2
                exit 1
            fi
        fi
        local newCommit="$(git rev-parse HEAD)"

        local first=true
        for branch in "${branches[@]}"; do
            printf '  -- %s\n' "$branch"
            if ! $first; then
                git branch -f "$branch" "$newCommit"
            fi
            first=false
        done

        touch .git/nexus-rebase/done/"$commit"
    done
}

cmd_start() {
    cloneTempNexus

    #FIXME: Make sure there's no local changes on said branches.

    # Set up commit dependencies for topological sort.  The files in reverse-deps
    # list all the commits based on top of the commit that is the name of the file.
    # The files in branches name all of the branches that contain the commit that is
    # the name of the file.
    # The files in done are completion flags so that we can restart where we left off.
    mkdir -p .git/nexus-rebase/{reverse-deps,branches,done}
    local root="$(git rev-parse origin/master)" commit previousCommit branch
    local branches=( $(findManagedBranches) )

    for branch in "${branches[@]}"; do
        previousCommit="$root"
        exec 4< <(git log --reverse --format='%H' "origin/master..origin/$branch")
        while read -r -u 4 commit; do
            mkdir -p .git/nexus-rebase/reverse-deps/"$previousCommit"
            touch .git/nexus-rebase/reverse-deps/"$previousCommit"/"$commit"
            mkdir -p .git/nexus-rebase/branches/"$commit"
            touch .git/nexus-rebase/branches/"$commit"/"$branch"
            previousCommit="$commit"
        done
        exec 4<&-
    done

    # Check out all branches to ensure we have local copies and they are tracking origin
    for branch in "${branches[@]}"; do
        git checkout "$branch"
        #FIXME: Make sure none have local modifications
    done

    # Reset all local copies of managed branches to master
    git checkout master
    for branch in "${branches[@]}"; do
        git branch -f "$branch" "$root"
    done

    # Start the queue

    cmd_continue
}

cmd_push() {
    cd /tmp/nexus
    git push origin master
    git push --force-with-lease origin $(managedBranches)
}

main() {
    local cmd="$1"
    shift
    "cmd_$cmd" "$@"
}

main "$@"
