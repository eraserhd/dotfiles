#!/usr/bin/env bash

set -eo pipefail

showOutputOnFail() {
    local errorCode tmp=$(mktemp)
    "$@" >"$tmp" 2>&1
    errorCode=$?
    if (( errorCode > 0 )); then
        echo 'Command failed: ' "$@" >&2
        cat "$tmp"
        rm -f "$tmp"
        return $errorCode
    fi
    rm -f "$tmp"
}

cloneTempNexus() {
    printf 'Cloning nexus...\n'
    rm -rf /tmp/nexus
    cd /tmp
    showOutputOnFail git clone git@github.com:coding-boot-camp/nexus.git
    cd nexus
    touch .git/failed-branches.txt
}

applyPatches() {
    local patch
    for patch in "$@"; do
        showOutputOnFail git cherry-pick "origin/staging^{/$patch}"
    done
}

branchesToRebase() {
    local branch
    git branch -r |sed -e '
        s,^  *origin/,,
        / -> /d
        /^master$/d
        /^staging-/d
        /^production-/d
    '
}

rebaseBranch() {
    local branch="$1"
    showOutputOnFail git checkout "$branch"
    if ! git rebase --empty=drop master >/dev/null 2>&1; then
        printf %s\\n "$branch" >>.git/failed-branches.txt
        showOutputOnFail git rebase --abort
        return 1
    fi
}

reportFailedBranches() {
    printf 'Failed branches:\n' >&2
    cat .git/failed-branches.txt >&2
    printf '\n' >&2
}

cmd_start() {
    cloneTempNexus
    applyPatches "$@"
    exec 3< <(branchesToRebase)
    while read -u 3 -r branch; do
        printf 'Rebasing %s... ' "$branch"
        if ! rebaseBranch "$branch"; then
            printf 'FAILED\n'
        else
            printf 'ok\n'
        fi
    done
    exec 3<&-
    reportFailedBranches
}

cmd_failed() {
    cd /tmp/nexus
    reportFailedBranches
}

cmd_push() {
    cd /tmp/nexus
    git push origin master
    git push --force-with-lease origin $(branchesToRebase)
}

main() {
    local cmd="$1"
    shift
    "cmd_$cmd" "$@"
}

main "$@"
