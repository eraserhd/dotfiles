#!/usr/bin/env bash

set -eo pipefail

showOutputOnFail() {
    local errorCode tmp=$(mktemp)
    "$@" >"$tmp" 2>&1
    errorCode=$?
    if (( errorCode > 0 )); then
        echo 'Command failed: ' "$@" >&2
        cat "$tmp"
        rm -f "$tmp"
        return $errorCode
    fi
    rm -f "$tmp"
}

cloneTempNexus() {
    printf 'Cloning nexus...\n'
    rm -rf /tmp/nexus
    cd /tmp
    showOutputOnFail git clone git@github.com:coding-boot-camp/nexus.git
    cd nexus
}

applyPatches() {
    local patch
    for patch in "$@"; do
        showOutputOnFail git cherry-pick "origin/staging^{/$patch}"
    done
}

managedBranches() {
    printf 'tools\n'
    git log --reverse --format='%s' origin/master..origin/staging |sed -e 's/ .*$//'
}

makeSteps() {
    (
        local patch
        for patch in "$@"; do
            printf 'applyPatch "%s"\n' "$path"
        done
        local branch
        for branch in $(managedBranches); do
            printf 'rebaseBranch "%s"\n' "$branch"
        done
    ) >.git/nexus-steps
}

do_applyPatch() {
    local name="$1"
    git cherry-pick "origin/$name"
}

do_rebaseBranch() {
    local branch="$1"
    git checkout "$branch"
    git reset --hard "origin/$branch"
    git rebase master
}

cmd_continue() {
    local command
    while true; do
        if ! read -r command <.git/nexus-steps; then
            break
        fi
        sed -i '' -e '1d' .git/nexus-steps

        printf '== %s\n' "$command"
        eval "do_$command"
    done
}

cmd_start() {
    cloneTempNexus
    makeSteps "$@"
    cmd_continue
}

cmd_push() {
    cd /tmp/nexus
    git push origin master
    git push --force-with-lease origin $(managedBranches)
}

main() {
    local cmd="$1"
    shift
    "cmd_$cmd" "$@"
}

main "$@"
