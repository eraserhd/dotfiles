# Kakfs
# ‾‾‾‾‾

mount

# General Settings
# ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

set-option global autoreload yes
set-option global grepcmd 'ag --column'

hook global BufWritePre .* %{ nop %sh{ mkdir -p $(dirname "$kak_hook_param") }}

alias global gn grep-next-match
alias global gp grep-previous-match

# Appearance
# ‾‾‾‾‾‾‾‾‾‾

colorscheme palenight

set-option global ui_options ncurses_assistant=none ncurses_status_on_top=true ncurses_set_title=false
set-face global LineNumbersWrapped black
add-highlighter global/matching show-matching

hook global WinSetOption filetype=(?!tmux-copy).* %{
    try %{ add-highlighter window/number number-lines }
    try %{ add-highlighter window/whitespace show-whitespaces -spc ' ' -tab '➤' -lf '↩' }
}
hook global WinSetOption filetype=tmux-copy %{
    try %{ remove-highlighter window/number }
    try %{ remove-highlighter window/whitespace }
}

# Works around #1872, no $kak_client on WinSetOption
define-command highlight-trailing-whitespace %{
    evaluate-commands %sh{
        if [ -z "$kak_client" ]; then
            exit
        fi
        printf %s\\n 'try %{ remove-highlighter window/trailing-whitespace }'
        eval filetype="$(cat $kak_opt_kakfs/windows/$kak_client/opt_filetype)"
        case "$filetype" in
        diff) printf %s\\n 'add-highlighter window/trailing-whitespace regex '"'"'^[^\n]+?\K\h+$'"'"' 0:default,rgb:ff5370+g' ;;
        *)    printf %s\\n 'add-highlighter window/trailing-whitespace regex '"'"'\h+$'"'"' 0:default,rgb:ff5370+g' ;;
        esac
    }
}

hook global WinSetOption filetype=.* %{
    hook -once NormalIdle .* highlight-trailing-whitespace
}

# Stolen from mawww
declare-option -hidden regex curword
set-face global CurWord default,rgb:4a4a4a

hook global NormalIdle .* %{
    eval -draft %{ try %{
        exec <space><a-i>w
        set-option buffer curword "\b\Q%val{selection}\E\b"
    } catch %{
        set-option buffer curword ''
    } }
}
add-highlighter global/ dynregex '%opt{curword}' 0:CurWord

define-command wrap %{
    add-highlighter window/wrap wrap -word -width 78
}

# System clipboard handling
# ─────────────────────────

define-command -override -hidden copy-snarf-to-dquote %{
    evaluate-commands %sh{
        snarf="$(9 9p read snarf/snarf && printf x)"
        if [ $? -ne 0 ]; then
            exit
        fi
        dquote="$(cat $kak_opt_kakfs/windows/$kak_client/main_reg_dquote && printf x)"
        if [ $? -ne 0 ]; then
            exit
        fi
        if [ ! "$snarf" = "$dquote" ]; then
            printf "set-register dquote '"
            printf %s "${snarf%x}" |sed -e "s/'/''/g"
            printf "'\n"
        fi
    }
}

declare-option -hidden str snarf_last_dquote
define-command -override -hidden copy-dquote-to-snarf %{
    evaluate-commands %sh{
        dquote="$(cat $kak_opt_kakfs/windows/$kak_client/main_reg_dquote && printf x)"
        if [ $? -ne 0 ]; then
            exit
        fi
        eval last_dquote="$(cat $kak_opt_kakfs/global/opt_snarf_last_dquote && printf x)"
        if [ $? -ne 0 ]; then
            exit
        fi
        if [ ! "$dquote" = "$last_dquote" ]; then
            printf %s "${dquote%x}" |9 9p write snarf/snarf
            printf "set-option global snarf_last_dquote '"
            printf %s "${dquote%x}" |sed -e "s/'/''/g"
            printf "'\n"
        fi
    }
}

hook -group snarf global FocusIn .* copy-snarf-to-dquote
hook -group snarf global NormalIdle .* copy-dquote-to-snarf

# Soft tabs
# ‾‾‾‾‾‾‾‾‾

define-command -params 0 expand-tabs %{
    hook -group expand-tabs window InsertChar \t %{ try %{
        execute-keys -draft "h<a-h><a-k>\A\h+\z<ret><a-;>;%opt{indentwidth}@"
    } }
    hook -group expand-tabs window InsertDelete ' ' %{ try %{
        execute-keys -draft "h<a-h><a-k>\A\h+\z<ret>i<space><esc><lt>"
    } }
}

define-command -params 0 keep-tabs %{
    remove-hooks window expand-tabs
}

hook global WinSetOption filetype=(?!makefile).* expand-tabs
hook global WinSetOption filetype=makefile keep-tabs

# Find
# ‾‾‾‾

define-command -docstring 'Find a file' -params 1 -shell-script-candidates %{ag -l -f} -menu find %{ edit %arg{@} }

define-command -override -params 1 -shell-script-candidates %{
    dir="$(pwd)"
    if command -v mdfind >/dev/null; then
        mdfind -onlyin "${dir}/" / |sed -e 's,^'"${dir}"'/,,'
    else
        locate "${dir}/" |sed -e 's,^'"${dir}"'/,,'
    fi
} -menu f %{edit %arg{@}}

# Jump
# ‾‾‾‾

declare-option -hidden str jump_search_result

define-command -hidden -params 1 jump-helper %{
    evaluate-commands %sh{
        if [ "$1" -ef "${kak_buffile}" ]; then
            printf 'set-option global jump_search_result "%s"\n' "${kak_client}"
        fi
    }
}

define-command -override \
    -docstring %{jump [<options>] <file> [<line> [<column>]]

Takes all the same switches as edit.} \
    -params 1..3 \
    -file-completion \
    jump %{
    set-option global jump_search_result %opt{jumpclient}
    evaluate-commands %sh{
        for client in ${kak_client_list}; do
            echo "evaluate-commands -client \"${client}\" %{jump-helper \"$1\"}"
        done
    }
    evaluate-commands -try-client %opt{jump_search_result} %{
        edit %arg{@}
        try %{ focus }
    }
}

# Layout
# ‾‾‾‾‾‾

define-command update-client-options %{
    evaluate-commands %sh{
        toolsclient=
        toolsclient_left=-1
        toolsclient_top=999999

        # Best client for tools client is upper-righthand corner
        for window_dir in "$kak_opt_kakfs/windows"/*; do
            if [ ! -f "$window_dir/client_env_TMUX" -o ! -f "$window_dir/client_env_TMUX_PANE" ]; then
                continue
            fi
            client="${window_dir##*/}"
            TMUX="$(cat "$window_dir/client_env_TMUX")"
            TMUX_PANE="$(cat "$window_dir/client_env_TMUX_PANE")"
            export TMUX TMUX_PANE

            pane_position=$(tmux display-message -t "${TMUX_PANE}" -p -F '#{pane_top}.#{pane_left}')
            pane_top="${pane_position%.*}"
            pane_left="${pane_position#*.}"

            accept=no
            if [ $pane_left -gt $toolsclient_left ]; then
                accept=yes
            elif [ $pane_left -eq $toolsclient_left ] && [ $pane_top -lt $toolsclient_top ]; then
                accept=yes
            fi

            if [ $accept = yes ]; then
                toolsclient=$client
                toolsclient_left=$pane_left
                toolsclient_top=$pane_top
            fi
        done

        jumpclient=
        jumpclient_left=-1
        jumpclient_top=999999

        # Best client for jumpclient is just to left of toolsclient
        for window_dir in "$kak_opt_kakfs/windows"/*; do
            if [ ! -f "$window_dir/client_env_TMUX" -o ! -f "$window_dir/client_env_TMUX_PANE" ]; then
                continue
            fi
            client="${window_dir##*/}"
            TMUX="$(cat "$window_dir/client_env_TMUX")"
            TMUX_PANE="$(cat "$window_dir/client_env_TMUX_PANE")"
            export TMUX TMUX_PANE

            pane_position=$(tmux display-message -t "${TMUX_PANE}" -p -F '#{pane_top}.#{pane_left}')
            pane_top="${pane_position%.*}"
            pane_left="${pane_position#*.}"

            accept=no
            if [ $pane_left -lt $toolsclient_left ] && [ $pane_left -gt $jumpclient_left ]; then
                accept=yes
            elif [ $pane_left -eq $jumpclient_left ] && [ $pane_top -lt $jumpclient_top ]; then
                accept=yes
            fi

            if [ $accept = yes ]; then
                jumpclient=$client
                jumpclient_left=$pane_left
                jumpclient_top=$pane_top
            fi
        done

        # REPL pane is in the lower, right-hand corner
        repl_pane=
        repl_pane_left=-1
        repl_pane_top=-1
        tmux list-panes -F '#{pane_top} #{pane_left} #{pane_id}' | {
            while read pane_top pane_left pane_id; do
                accept=no
                if [ $pane_left -gt $repl_pane_left ]; then
                    accept=yes
                elif [ $pane_left -eq $repl_pane_left ] && [ $pane_top -gt $repl_pane_top ]; then
                    accept=yes
                fi

                if [ $accept = yes ]; then
                    repl_pane="$pane_id"
                    repl_pane_left=$pane_left
                    repl_pane_top=$pane_top
                fi
            done
            if [ -n "$repl_pane" ]; then
                printf 'set-option global tmux_repl_id %%{%s}\n' "$repl_pane"
            fi
        }

        if [ -n "$toolsclient" ]; then
            printf 'set-option global toolsclient "%s"\n' "$toolsclient"
        fi
        if [ -n "$jumpclient" ]; then
            printf 'set-option global jumpclient "%s"\n' "$jumpclient"
        fi
    }
}

hook -group client-tracker global FocusIn .* update-client-options
hook -group client-tracker global WinCreate .* update-client-options
hook -group client-tracker global WinClose .* update-client-options
hook -group client-tracker global WinResize .* update-client-options

# Normal Mode
# ‾‾‾‾‾‾‾‾‾‾‾

map global normal * '<a-i>w"/yn'
map global normal <a-*> '<a-i>w"/y<a-n>'

# Filetypes
# ‾‾‾‾‾‾‾‾‾

hook global WinSetOption filetype=nix %{
    set-option window indentwidth 2
}

hook -group wrap global WinSetOption filetype=asciidoc %{
    add-highlighter window/wrap -word
}
hook -group wrap global WinSetOption filetype=(?!asciidoc).* %{
    remove-highlighter window/wrap
}

# Clojure
# ‾‾‾‾‾‾‾

hook global WinSetOption filetype=(clojure|scheme|racket) %{
    parinfer-enable-window -smart
}

define-command -hidden -override lint-show-counters %{}

hook global WinSetOption filetype=clojure %{
    set-option window lintcmd 'clj-kondo --lint'
    lint-enable
    hook -group lint-diagnostics window NormalIdle .* %{ lint; lint-show }
}

declare-option -hidden str clojure_buffer_contents
declare-option -hidden str-list clojure_selections

define-command -override -params 1 -docstring %{Clojure element} \
    clojure-select-object %{
    evaluate-commands -draft %{
        execute-keys '%'
        set-option buffer clojure_buffer_contents %val{selection}
    }
    set-option buffer clojure_selections
    evaluate-commands %sh{
        kind="$1"
        count="${kak_count-1}"
        result_selections=''
        for desc in $kak_selections_char_desc; do
            anchor_line="${desc%%.*}"
            desc="${desc#*.}"
            anchor_column="${desc%%,*}"
            desc="${desc#*,}"
            cursor_line="${desc%%.*}"
            cursor_column="${desc#*.}"
            extent=whole
            case "|${kak_object_flags}|" in
                *"|inner|"*) extent=inside;;
            esac
            direction=''
            case "${kak_object_flags}" in
                *to_begin*to_end*|*to_end*to_begin*) direction='';;
                *to_begin*) direction=to_begin;;
                *to_end*) direction=to_end;;
            esac
            if [ $cursor_line -lt $anchor_line ]; then
                dir=forward
            elif [ $cursor_line -eq $anchor_line ] && [ $cursor_column -lt $anchor_column ]; then
                dir=forward
            fi
            if [ "$dir" = forward ]; then
                cursor_column=$(( cursor_column - 1 ))
            else
                anchor_column=$(( anchor_column - 1 ))
            fi
            eval "$(rep --op=select \
                --send kind,string,$kind \
                --send count,integer,$count \
                --send combine,string,$kak_select_mode \
                --send direction,string,$direction \
                --send extent,string,$extent \
                --send cursor-line,integer,$cursor_line \
                --send cursor-column,integer,$cursor_column \
                --send anchor-line,integer,$anchor_line \
                --send anchor-column,integer,$anchor_column \
                --print cursor-line,1,ok=yes%ncursor_line=%{cursor-line}%ncursor_column=%{cursor-column}%nanchor_line=%{anchor-line}%nanchor_column=%{anchor-column}%n \
                --print out,2,%{out} \
                --print err,2,%{err} \
                --print value,2,%{value}%n \
                "$kak_opt_clojure_buffer_contents" )"
            if [ "$ok" = "yes" ]; then
                dir=''
                if [ $cursor_line -lt $anchor_line ]; then
                    dir=forward
                elif [ $cursor_line -eq $anchor_line ] && [ $cursor_column -lt $anchor_column ]; then
                    dir=forward
                fi
                if [ "$dir" = forward ]; then
                    cursor_column=$(( cursor_column + 1 ))
                else
                    anchor_column=$(( anchor_column + 1 ))
                fi
                result_selections="${result_selections} ${anchor_line}.${anchor_column},${cursor_line}.${cursor_column}"
            fi
        done
        printf 'select -codepoint %s\n' "$result_selections"
    }
}

hook -group clojure-objects global WinSetOption filetype=clojure %{
    set-option window indentwidth 2
    map -docstring 'Clojure element'        window object e '<a-;> clojure-select-object element<ret>'
    map -docstring 'Clojure form'           window object f '<a-;> clojure-select-object form<ret>'
    map -docstring 'top-level Clojure form' window object t '<a-;> clojure-select-object toplevel<ret>'

    map window normal b '[<a-;> clojure-select-object element<ret>'
    map window normal B '{<a-;> clojure-select-object element<ret>'
    map window normal e ']<a-;> clojure-select-object element<ret>'
    map window normal E '}<a-;> clojure-select-object element<ret>'
    map window normal w '<a-a><a-;> clojure-select-object element<ret>'
}

# Misc
# ‾‾‾‾

define-command rm %{
    nop %sh{ rm -f "$kak_buffile" }
    delete-buffer!
}

define-command \
    -override \
    -docstring %{mv <target>: move this file to <target> dir or file} \
    -shell-script-candidates %{ag -l -f} \
    -params 1 \
    mv %{
    evaluate-commands %sh{
        target="$1"
        if $kak_modified; then
            printf 'fail "mv: buffer is modified."\n'
            exit
        fi
        if [ -d "$target" ]; then
            target="${target}/$(basename "$kak_buffile")"
        fi
        mkdir -p "$(dirname "$target")"
        mv "$kak_buffile" "$target"
        if [ $? -ne 0 ]; then
            printf 'fail "mv: unable to move file."\n'
            exit
        fi
        printf 'delete-buffer\n'
        printf 'edit %%{%s}\n' "$target"
    }
}
